roboticsND

********* WATCH YOUR INDENTATION *************************

# Setting up RoboND Environment
git clone https://github.com/udacity/RoboND-Python-StarterKit.git  
cd RoboND-Python-StarterKit

Windows: rename meta_window_patch.yml to meta.yml

# create env
conda env create -f environment.yml

#verify
conda info --envs

#clean
conda clean -tp

#Activate
source activate RoboND
# or
activate RoboND

#delete
conda env removee -n RoboND


##########################################################
Robotics Information
__________________________________________________________

Perception - Decision Making - Actuation

Each step in ROS breaks down the fundamentals to a node

Node -- Small unix processes that covers a small and relatively specific portion of the robots overall functionality

ROS Master - Maintains active registry of all nodes on the system - Hosts the parameter server which stores params and config values amongst nodes.
	Responsible for:
		Providing naming and registration services to other running nodes
		Tracking all publishers and subscribers
		Aggregating log messages generated by the nodes
		Facilitating connections between nodes
	Executed with roscore

Nodes pass messages via Topics

Topics must be subscribed to 

Nodes can Publish and Subscribe (Pub/Sub Architecture)

Message Types: Predefined message types 
	Sensor
	Physical Quantities
	Custom

Messages can contain any type of data
	img data
	json

Services - allow passing of messages
	1:1 basis using request/response architecture

Compute Graphs - Shows relationships between nodes - typically a diagram


##########################################################
ROS Commands and stuff
__________________________________________________________

env -- changes to environment

roscore  -- To run the master process, you must execute the command roscore

rosrun  --  running nodes, like --  rosrun turtlesim turtlesim-node

rosnode list -- returns a list of all nodes that are active and have been registered with the ROS Master

rostopic list -- query the ROS Master for a list of all topics

rostopic info /path/to/topic

rosmsg show  -- shows message output
rosed -- view and edit files in ros env
	** this is handy to see the commented code 
	** that explains the message

rostopic echo /path/to/topic -- view in real time the content of the messages

Catkin Workspaces - All of the ROS related code you develop throughout this course will reside in your catkin workspace.
	top-level directory is usually *  catkin_ws  *
	sub directory is *  src  *

catkin_init_workspace  (inside src directory)  check out more here: http://wiki.ros.org/catkin/conceptual_overview

catkin_make   (in /catkin_ws  directory)
	2 new directories
		build -- build space for the c++ packages
		devel -- contains setup.bash which must be sourced prior to using the workspace

Familiarize with conventional dir structure here: http://www.ros.org/reps/rep-0128.html

cloned git clone https://github.com/udacity/simple_arm_01.git simple_arm into the src directory

making now will cause a dependency error so installed this first...
sudo apt-get install ros-kinetic-controller-manager

catkin_make

roslaunch -- Allows
	Launching ROS Master and multiple nodes with 1 command
	Set auto params on the parameter server
	automatically re-spawn processes that have died

source devel/setup.bash
roslaunch simple_arm robot_spawn.launch

************ The launch trifecta - each time you want to run it  ***********************
~/catkin_ws   =>  catkin_make
~/catkin_ws   =>  source devel/setup.bash
~/catkin_ws   =>  roslaunch simple_arm robot_spawn.launch

missing
sudo apt-get install ros-lunar-ros-control ros-lunar-ros-controllers


Errored out the roslaunche and gazebo fails with the following error
[ERROR] [1496471044.557764995, 262.513000000]: Could not load controller 'joint_2_position_controller' because controller type 'effort_controllers/JointPositionController' does not exist.
[ERROR] [1496471044.557813876, 262.513000000]: Use 'rosservice call controller_manager/list_controller_types' to get the available types
[ERROR] [1496471045.559136, 263.515000]: Failed to load joint_2_position_controller

the command -  rosservice call controller_manager  -  returns Service is not available

google search turned up: http://answers.ros.org/question/242778/book-mastering-ros-for-robotics-programming-2nd-edn-chapter-3-simulating-robot-using-ros-gazebo/

"You are missing packages. The errors you get tell you that at least controller_manager is not installed on your machine. I'd be surprised if the book didn't tell you about this though, it's a basic step to get someone else's sources working in your workspace.""

These commands fixed the issue:

source /opt/ros/kinetic/setup.bash
rosdep update
rosdep install --from-paths ~/catkin_ws/src --ignore-src

which is supposedly good practice for anytime you clone or import another project.

rosdep check <project>  (i.e., simple_arm)

To automatically install all dependencies.  From the root of the ws  (catkin_ws)

rosdep install -i <project>  (i.e., simple_arm)


urdf (Universal Robot Description Files)

To create a new package, navigate to the src folder and enter
catkin_create_pkg <your_package_name> [dependency1, dependency2]

example ->   catkin_create_pkg my_package        (no dependencies yet)


********************* Writing Nodes

created scripts directory in simple_arm
~/catkin_ws/src/simple_arm/scripts

Once the scripts directory has been created, executable scripts can be added to the package.
However, in order for rosrun to find them, their permissions must be changed to allow execution.

    echo '#!/bin/bash' >> hello
    echo 'echo Hello World' >> hello

change permissions so that it can be executed

    chmod u+x hello
    cd ~/catkin_ws
    catkin_make
    source devel/setup.bash
    rosrun simple_arm hello    ----> returns

Created a simple_mover node
    cd ~/catkin_ws/src/simple_arm/scripts
    touch simple_mover
    chmod u+x simple_mover

******* Running the simple_mover node

cd ~/catkin_ws
source devel/setup.bash
rosrun simple_arm simple_moverro

************** Creating a new service definition ******************************
services consist of 2 messages being passed. A request passed to the service and the response
cd ~/catkin_ws/src/simple_arm
mkdir srv  -  cd srv

touch GoToPosition.srv

modified service to have 2 section separated with 3 dashes  '---'
    First section is the definition of the request messge
    Second is the service response

************** Modifying CMakeLists.txt **********************
CMakeLists are scripts used by catkin to tell it which files to generate code for

uncommented:
    ## Generate services in the 'srv' folder
    add_service_files(
       FILES
       GoToPosition.srv
    )
and
    generate_messages(
       DEPENDENCIES
       std_msgs  # Or other packages containing msgs
    )

************** Modifying package.xml *************************
responsible for defining many of the packages properties such as the name, version, numbers, authors and so on
When rosdep is searching for dependencies it is the package.xml that is being parsed.

    add message_generation and message_runtime to package.xml

    <build_depend>message_generation</build_depend>

    <run_depend>message_runtime</run_depend>

********** Building the package ****************************

cd ~/catkin_ws
catkin_make
cd devel/lib/python2.7/dist-packages

list the files

env | grep PYTHONPATH
    outputs: PYTHONPATH=/opt/ros/kinetic/lib/python2.7/dist-packages

************** Creating the empty arm_mover node script ***************

create the simple_mover script
cd ~/catkin_ws/src/simple_arm/scripts
touch arm_mover
chmod u+x arm_mover

************** View camera image stream ****************************

This shows the camera view

    rqt_image_view /rgb_camera/raw

To point the camera towards the numbered blocks on the counter top, we would need to rotate
both joint 1 and joint 2 by approximately pi/2 radians

rosservice call /arm_mover/safe_move "joint_1: 1.57 joint_2: 1.57"

joint_1 is the rotation of the column (z-axis)
joint_2 is the rotation of the arm (up/down)




